buildscript {
    ext.kotlin_version = '1.4.32'
    repositories {
        mavenCentral()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-eap"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    //id "org.jetbrains.kotlin.multiplatform" version "$kotlin_version"
}

//def kotlinPluginId = 'kotlin-multiplatform'
def kotlinPluginId = 'org.jetbrains.kotlin.multiplatform'
final hasPlugin = project.getPlugins().hasPlugin(kotlinPluginId);
if (hasPlugin) {
    final Plugin plugin = project.getPlugins().getPlugin(kotlinPluginId)
    println 'Plugin already applied - version ' + plugin.properties['kotlinPluginVersion']
} else {
    apply plugin: "kotlin-multiplatform"
}


repositories {
    mavenCentral()
}

kotlin {
    iosArm64("ios") {
        binaries {
            framework()
        }
    }
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
        compilations.test.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation 'junit:junit:4.12'
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation group: 'com.samskivert', name: 'jmustache', version: '1.13'
                implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        iosMain {
        }
        iosTest {
        }

    }

    targets {
        fromPreset(presets.js, 'js')

        configure([js]) {
            tasks.getByName(compilations.main.compileKotlinTaskName).kotlinOptions {
                sourceMap = true
                sourceMapEmbedSources = "always"
                moduleKind = "umd"
                //outputFile = "chords.umd.js"
            }
        }
    }

}

task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'RELEASE'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = "/tmp/iostest/" //getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}