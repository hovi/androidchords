def jvm = !project.hasProperty("js")

buildscript {
    ext.kotlin_version = '1.3.21'
    def jvm2 = project.hasProperty("jvm")
    repositories {
        mavenCentral()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-eap"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        if (!jvm2) {
            classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.26"
        }
    }
}

if (jvm) {
    apply plugin: 'kotlin'
    sourceSets.main.kotlin.srcDirs += "src/main/kotlinjvm"
} else {
    apply plugin: 'org.jetbrains.kotlin.frontend'
    apply plugin: 'kotlin2js'

    sourceSets.main.kotlin.srcDirs += "src/main/kotlinjs"
}




if (jvm) {
    println("JVM")
} else {
    println("NO JVM")
}


repositories {
    mavenCentral()
}

dependencies {
    //JVM
    if (jvm) {
        implementation group: 'com.samskivert', name: 'jmustache', version: '1.13'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        testImplementation 'junit:junit:4.12'
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    } else {
        //JS
        implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    }
}

if (!jvm) {

    compileKotlin2Js {
        kotlinOptions.outputFile = "${projectDir}/src/main/web/chords.umd.js"
        kotlinOptions.moduleKind = "umd"
        kotlinOptions.sourceMap = true
        kotlinOptions.sourceMapEmbedSources = "always"
        kotlinOptions.metaInfo = true
        //kotlinOptions.moduleKind = 'commonjs'
        //kotlinOptions.main = "call"
    }

    kotlinFrontend {
        npm {
            dependency "requirejs" // production dependency
            //devDependency "karma"     // development dependency
        }
        webpackBundle {
            bundleName = "main"
            contentPath = file('src/main/web')
        }
    }

    task assembleWeb(type: Sync) {
        configurations.compile.each { File file ->
            from(zipTree(file.absolutePath), {
                includeEmptyDirs = false
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                            !path.startsWith("META-INF/"))
                }
            })
        }
        from compileKotlin2Js.destinationDir
        into "${projectDir}/src/main/web/lib/js"

        dependsOn classes
    }

    assemble.dependsOn assembleWeb

}